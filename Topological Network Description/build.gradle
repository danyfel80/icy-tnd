apply plugin: 'java-library'
apply plugin: 'eclipse'

version = '0.0.1'

println "ICY_HOME=${System.env.ICY_HOME}"
println project.name + " " + version


configurations {
  extraLibs // configuration that holds jars to include in the jar
  implementation.extendsFrom(extraLibs)
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  extraLibs 'org.jgrapht:jgrapht-core:0.9.1'
  extraLibs 'org.apache.poi:poi:3.14'
  

// 1.2. Icy libraries
  implementation files("${System.env.ICY_HOME}/lib/vecmath.jar")
  implementation files("${System.env.ICY_HOME}/lib/bioformats.jar")
  implementation files("${System.env.ICY_HOME}/lib/vtk.jar")

  implementation files("${System.env.ICY_HOME}/icy.jar") // Icy core
  implementation files("${System.env.ICY_HOME}/plugins/adufour/ezplug/EzPlug.jar") // EzPlug
  implementation files("${System.env.ICY_HOME}/plugins/adufour/blocks/Blocks.jar") // Blocks
  implementation files("${System.env.ICY_HOME}/plugins/adufour/protocols/Protocols.jar") // Protocols
  implementation files("${System.env.ICY_HOME}/plugins/adufour/workbooks/Workbooks.jar") // Workbooks
  implementation files("${System.env.ICY_HOME}/plugins/adufour/connectedComponents/ConnectedComponents.jar") // ConnectedComponents
  implementation files("${System.env.ICY_HOME}/plugins/nherve/toolbox/NherveToolbox.jar") // Toolbox
  implementation files("${System.env.ICY_HOME}/plugins/vannary/morphomaths/MorphoMaths.jar") // MorphoMaths
}

// In this section source and test files are declared
eclipse {
  classpath{
    defaultOutputDir = file("ecbuild")
    file.whenMerged {
            entries.each {
                source ->
                    // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
                    if (source.kind == 'src' && source.toString().contains('output')) {
                        source.output = 'ecbuild'
                    }
            }
        }
    downloadJavadoc = true
    }
  
  project {
    natures += ['icy.icy4eclipse.core.icynature']
    //natures += ['org.eclipse.buildship.core.gradleprojectnature']
    //buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  }
}

jar {
  from {
    configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.output
  from sourceSets.main.java
  from configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  //archives javadocJar
}
